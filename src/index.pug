doctype html
head
  title Bird Book Archive
  link(rel='icon' href='data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 100 100%22><text y=%22.9em%22 font-size=%2290%22>ðŸ“š</text></svg>')

  meta(name='viewport' content='width=device-width, initial-scale=1')
  meta(charset='UTF-8')
  link(rel='stylesheet', href='site.css')

script(src='main.js')
div.filters
  div.filter-group
    span.filter-group__label='Category'
    each category in categories
      button.filter-button(
        data-filter-type='category',
        data-filter-value=category || '__',
        data-filter-selected='no'
      )=category || 'None'
  div.filter-group
    span.filter-group__label='Location'
    each location in Object.entries(locations)
      - let name = location[0]
      - let icon = location[1]
      button.filter-button(
        data-filter-type='location',
        data-filter-value=name,
        data-filter-selected='no'
      )=`${name} ${icon}`
    if books.map(b => b.Location).some(location => !location)
      button.filter-button(
        data-filter-type='location',
        data-filter-value='__',
        data-filter-selected='no'
      )='None'
  div.filter-group
    span.filter-group__label='Search'
    input.search(type='search',placeholder='Search titles, authors, and notes')
  div.search-summary(title='Visualization of the last valid search')
div.book-list
  each book in books
    if book.Title
      div.book(
        data-category=book.Category || '__',
        data-location=book.Location || '__',
        data-title=book.Title,
        data-notes=book.Notes,
        data-author=book.Author,
        data-isbn=book.ISBN,
        style=`--book-color: ${book.Color};`
      )
        div.book__thumbnail
          if book.ISBN && book['Google ID']
            a(href=`https://books.google.ca/books?id=${book['Google ID']}`)
              img(src=book.ISBN, alt="Book cover photo for " + book.Title)
          else if book.ISBN
            img(src=book.ISBN, alt="Thumbnail for " + book.Title)
        h3.book__title= book.Title
        div.book__author= book.Author
        div.book__notes= book.Notes
        div.book__location(title=`Location: ${book.Location}`)= locations[book.Location]


//- Generate CSS with a selector for each category filter:
//- If any category filter is set, hide everything. If the book matches at least one of
//- the selected filters, show it.
style.
  /* use display: none to hide the element */
  body[data-category]:not([data-category='']) .book-list .book { --hidden-category: none; }
  body[data-location]:not([data-location='']) .book-list .book { --hidden-location: none; }
  body[data-search]:not([data-search='']) .book-list .book     { --hidden-by-search: none; }
  .book {
    /* it is not hidden if the category doesn't hide it and the location doesn't hide it and the search doesn't hide it*/
    /* in other words, hide every book for which the location doesn't match or the category doesn't match or the search doesn't match*/
    --hidden: var(--hidden-category, var(--hidden-location, var(--hidden-by-search)));
  }
style
  each category in categories
    - let categoryKey = category || '__'
    - let selectorForMatchingThisCategory = "[data-category='" + category + "']"
    =`body[data-category~='${categoryKey}'] .book-list .book[data-category='${categoryKey}'] { --hidden-category: unset; }`
  each location in Object.entries(locations).concat([['__','']])
    - let name = location[0]
    =`body[data-location~='${name}'] .book-list .book[data-location='${name}'] { --hidden-location: unset; }`

